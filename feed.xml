<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>botbreeder.github.io</title>
    <link href="https://botbreeder.github.io/feed.xml" rel="self" />
    <link href="https://botbreeder.github.io" />
    <updated>2024-05-24T17:05:49+02:00</updated>
    <author>
        <name>Julien Laguerre</name>
    </author>
    <id>https://botbreeder.github.io</id>

    <entry>
        <title>Overhaul</title>
        <author>
            <name>Julien Laguerre</name>
        </author>
        <link href="https://botbreeder.github.io/overhaul.html"/>
        <id>https://botbreeder.github.io/overhaul.html</id>

        <updated>2024-05-24T17:01:34+02:00</updated>
            <summary>
                <![CDATA[
                    I guess an overhaul is a sane thing, even though it feels otherwise. So, it didn't go so well. Unification, in itself, isn't a tricky process, but implementing it showed holes in the plot, things I didn't expect. I had to reshape the semantics a&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>I guess an overhaul is a sane thing, even though it feels otherwise.</p>
<p>So, it didn't go so well. Unification, in itself, isn't a tricky process, but implementing it showed holes in the plot, things I didn't expect. I had to reshape the semantics a bit, add a few programmatic tools here and there, and in the end I'm still not satisfied with the results so far.</p>
<p>I’m planning a complete overhaul of Hup. There are several issues, in many domains, I want to tackle:</p>
<ul>
<li>The syntax is irregular, so I’ll change it to something closer to LISP, except it’s <code>a(b c d)</code> instead of <code>(a b c d)</code>,</li>
<li>I can’t refer to tables through variables, I want to make it possible,</li>
<li>There’s no macros, I want hygienic macros, + what I call “brushes”, that is, macros on steroids for highly redundant graphs,</li>
<li>There’s no access to low-level stuff, I want a way to do simple things like manipulating strings for instance,</li>
<li>It lacks some high-level specialized functionalities through libraries, namely 3D and ANN,</li>
<li>It’s not very fast, I want to implement it in another language.</li>
</ul>
<p>Last but not least, this time I want to draw a map of the system, get it right, step by step. A partner or a team would be a dreamy cherry on the cake.</p>
<p>Is C the only path when you're being serious about something? I have to find out.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Aftermath</title>
        <author>
            <name>Julien Laguerre</name>
        </author>
        <link href="https://botbreeder.github.io/aftermath.html"/>
        <id>https://botbreeder.github.io/aftermath.html</id>

        <updated>2024-04-26T21:53:09+02:00</updated>
            <summary>
                <![CDATA[
                    I can't believe how easily I implemented the other math operators. Sure a few rough edges are expected to manifest, but still, everything in the "a few operators" post is implemented. I'm now in the "after" of math operators. The next step won't go as&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>I can't believe how easily I implemented the other math operators. Sure a few rough edges are expected to manifest, but still, everything in the "a few operators" post is implemented. I'm now in the "after" of math operators.</p>
<p>The next step won't go as easy. I now need to work with things "other than numbers". I know there are many places where things could go wrong. I want unification, and that's not trivial. I might use an existing library for this, though... don't know yet.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>40 miles of bad road</title>
        <author>
            <name>Julien Laguerre</name>
        </author>
        <link href="https://botbreeder.github.io/40-miles-of-bad-road.html"/>
        <id>https://botbreeder.github.io/40-miles-of-bad-road.html</id>

        <updated>2024-04-25T09:44:01+02:00</updated>
            <summary>
                <![CDATA[
                    It's been a long way. At some point, I thought I'd never reach the other end of the tunnel. But I did. More infrastructure was needed to support the complete cycle, input / calculus / output. There were also subtle bugs, now eradicated. I even&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>It's been a long way. At some point, I thought I'd never reach the other end of the tunnel. But I did. More infrastructure was needed to support the complete cycle, input / calculus / output. There were also subtle bugs, now eradicated.</p>
<p>I even had to reshape the syntax parser a little bit. Indeed, the value part of a table was accepting lists of items, for example <code>| 1 2 3 | 4 5 6  </code> but the meaning was unclear. Now the value of a table is not a list of lists anymore, but just a list. We can still use parentheses to create lists of lists of course.</p>
<p>At first, the tables would mutate even while you create them, which was a bit weird. So I changed that, and now a space that's currently being modified by the user is marked as "suspended", so no mutation happen during edition.</p>
<p>I'm about to implement a few more operators and start playing around with my shiny new toy.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Closing the loop</title>
        <author>
            <name>Julien Laguerre</name>
        </author>
        <link href="https://botbreeder.github.io/closing-the-loop.html"/>
        <id>https://botbreeder.github.io/closing-the-loop.html</id>

        <updated>2024-04-20T16:44:45+02:00</updated>
            <summary>
                <![CDATA[
                    The loop is the propagation of changes between the user and the system. The input side of the loop is implemented, and I had the joy to witness a sum! When a table's values change, all the tables that watch its name get properly recalculated.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>The loop is the propagation of changes between the user and the system. The input side of the loop is implemented, and I had the joy to witness a sum! When a table's values change, all the tables that watch its name get properly recalculated.</p>
<p>So the sum is now happening in Hup. Other operators won't need a lot of work, so I'm rather focusing on the other part of the loop, the feedback. To implement feedback, I want source code generation to be comments and newlines aware. So I'll modify the parser to make a "shape aware" version of it. Basically, everything in tables' values will be wiped out (because how would I choose where each comment would survive), and everything else will stay the same. The only thing I'll keep from values is whether they are all on the same line, or each on a line of its own.</p>
<p>I can feel the part of me that doesn't want to go further. It's not happy.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Meta</title>
        <author>
            <name>Julien Laguerre</name>
        </author>
        <link href="https://botbreeder.github.io/meta.html"/>
        <id>https://botbreeder.github.io/meta.html</id>

        <updated>2024-04-15T17:57:09+02:00</updated>
            <summary>
                <![CDATA[
                    I could look at my design and call it a day, but there's one thing I'm definitely not satisfied with. Hup is all oriented towards the description of high-level "mental" operations. You can't parse a string of characters, or even just print a mere "hello&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>I could look at my design and call it a day, but there's one thing I'm definitely not satisfied with.</p>
<p>Hup is all oriented towards the description of high-level "mental" operations. You can't parse a string of characters, or even just print a mere "hello world" to the screen. (Well yeah, you can.) But where Hup shines is elsewhere. It's vastly superior to any kind of supercharged Behavior Tree I've seen here and there, even to <a href="https://plexil-group.github.io/plexil_docs/" target="_blank" rel="noopener noreferrer">Plexil</a>, and it's so friendly and pragmatic compared to Prolog. So clearly this is our target here, high-level stuff, mental behaviors themselves.</p>
<p>But Hup's weakness, as it is today, is metaprogramming. Sure you can have tables generating tables on the fly, and you can also switch from state-thinking to event-thinking using the natural recursion capability of formulas. But it doesn't mean it would be easy to write programs that evolve, and I don't like it. I want more.</p>
<p>Let me explain what we can do now. We can have tables which generate values which are other tables. These other tables are first class citizens too, no problem. Another thing we can do is using recursion to make values evolve over time by themselves, for example <code>[ one more = [one more] 1 | 1 ]</code> would keep adding ones to its list of values.</p>
<p>But meta is another thing entirely. It's about structural, it's about runtime mutation. I don't know. I have this idea of "meta-tables" in the back of my head for some time now. A meta-table would obviously contain data about a regular table. I don't know if <em>that</em> idea of meta-tables and <em>this</em> desire of metaprogramming are somehow related. All I know is that I'm not done yet.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Base structure</title>
        <author>
            <name>Julien Laguerre</name>
        </author>
        <link href="https://botbreeder.github.io/base-structure.html"/>
        <id>https://botbreeder.github.io/base-structure.html</id>

        <updated>2024-04-14T12:39:12+02:00</updated>
            <summary>
                <![CDATA[
                    Yet another load of cosmetic details here and there, so many that I don't count them anymore. But... I also worked on the main thing. So I have a basic structure that now works correctly, and while the UI code is all wild and organic,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Yet another load of cosmetic details here and there, so many that I don't count them anymore. But...</p>
<p>I also worked on the main thing. So I have a basic structure that now works correctly, and while the UI code is all wild and organic, the engine code is well structured and commented JSDoc style. Programming "correctly" is surprisingly more error prone than my natural code-fu, but I finally eradicated all those nasty little bugs.</p>
<p>Now, the structure is as follows. Tables are associated with spaces, and names. Names are not unique to tables. Several tables can have the same name, that's why a table is identified by a generic ID and a name is a set of IDs of tables that share that name. Same goes for spaces, since spaces contain tables. The purpose of names and spaces are different though: names are how a table references other tables in a formula, while spaces form a logical partition of data in Hup, mainly for communication with the outer world.</p>
<p>Spaces are either "exposed" or not. Exposed spaces are the ones that are visible outside the engine. This is where you'd plug any external devices, and where the UI is connected. Exposed means, "read/write accessible from the outside."</p>
<p>For now, you register callback functions to expose a space, then when the tables in that space change, the callback is called, either with a text version of the content, or with the AST. Simple.</p>
<hr>
<p><span style="text-decoration: line-through;">On the FUI front, I had some sort of revelation the other day. UIs always have either light or dark modes, but perhaps it would be interesting to get past this. The content would be dark mode, but the container would be light mode, in shades of white and grey, white for unoccupied screen areas, grey for grouping contents. Lines and shapes would be diagonal where appropriate. </span><span style="text-decoration: line-through;">It's worth a try.</span></p>
<p>Do not try to bend the spoon. I tried this light&amp;dark thing and it was ugly as hell. Then I understood that my UI was meant to disappear behind the user's UI. The user-developer would setup a frontend, with Hup as the backend. Then the user-users (the users of the user-developer's app) wouldn't see Hup's UI, unless they hit F12 or something, to have a look behind the curtain. They'd see the frontend of the user-developer's app. And <em>that</em> spoon isn't my business.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Bells and whistles et caetera</title>
        <author>
            <name>Julien Laguerre</name>
        </author>
        <link href="https://botbreeder.github.io/bells-and-whistles-et-caetera.html"/>
        <id>https://botbreeder.github.io/bells-and-whistles-et-caetera.html</id>

        <updated>2024-04-08T16:35:44+02:00</updated>
            <summary>
                <![CDATA[
                    I couldn't start working on the interpreter without getting comfortable first... So I added a few things to the interface. Code editors driven by Codemirror, a proper syntax highlighter (which still doesn't catch a few edge cases), and even a fancy little scrollmap on the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="gallery-wrapper"><div class="gallery"  data-is-empty="false" data-translation="Add images" data-columns="1">
<figure class="gallery__item"><a href="https://botbreeder.github.io/media/posts/13/gallery/wip-interface.PNG" data-size="1920x1080"><img loading="lazy" src="https://botbreeder.github.io/media/posts/13/gallery/wip-interface-thumbnail.PNG" alt="Screenshot of the WIP on the interface" width="720" height="405"></a></figure>
</div></div>
<p>I couldn't start working on the interpreter without getting comfortable first... So I added a few things to the interface. Code editors driven by <a href="https://codemirror.net/5/" target="_blank" rel="noopener noreferrer">Codemirror</a>, a proper syntax highlighter (which still doesn't catch a few edge cases), and even a fancy little scrollmap on the right-hand side of the screen, thanks to <a href="https://larsjung.de/pagemap/" target="_blank" rel="noopener noreferrer">Pagemap</a>.</p>
<p>I know I'll be tweaking this... like, forever. But now I can start setting up the interpreter!</p>
<p>Oh, and I added comments to the parser. Oldie goldies, <code>/* ... */</code> and <code>// ...</code> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Parsing in Js after all</title>
        <author>
            <name>Julien Laguerre</name>
        </author>
        <link href="https://botbreeder.github.io/parsing-in-javascript-after-all.html"/>
        <id>https://botbreeder.github.io/parsing-in-javascript-after-all.html</id>

        <updated>2024-04-01T15:55:02+02:00</updated>
            <summary>
                <![CDATA[
                    Oh... kay... I've been a little optimistic there. 😅 I needed to move on, so I decided to switch back to good old Javascript. I used PEGGYjs, which is the properly maintained child of PEGjs. A few hours later, when I look at the sheer&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Oh... kay... I've been a little optimistic there. 😅</p>
<p>I needed to move on, so I decided to switch back to good old Javascript. I used <a href="https://peggyjs.org/">PEGGYjs</a>, which is the properly maintained child of PEGjs. A few hours later, when I look at the sheer size of the grammar, I don't regret my decision. It wasn't exactly trivial to setup in Javascript, so doing it in Go would have been next to impossible for me.</p>
<p>One potential benefit will be the ability to include Javascript lines of code directly in the tables, for example. But that will require an additional syntactic device that is not invented yet. So for now, I'll stick to the original plan. Having Hup Javascript-based shouldn't make it overly slow.</p>
<p>Anyway every code sample shown in the previous posts is now correctly parsed by the parser, and turned into a JSON object.</p>
<pre><code>[</code><br><code>    older than 50</code><br><code>    = [detailed family]</code><br><code>        % #genre( #name age(#age) ) &amp;( #age &gt; 50 )</code><br><code>        : #name( #genre #age years old )</code><br><code>    | Pedro( man 66 years old )</code><br><code>    | Alma( woman 62 years old )</code><br><code>]</code></pre>
<p>This results in the following structure.</p>
<pre id="output" class="">[
  {
    TableName: 'older than 50',
    TableFormula: [
      {
        Operator: 'PRODUCE',
        Shaped: false,
        Operands: [
          {
            T: 'Reference',
            V: 'detailed family'
          }
        ]
      },
      {
        Operator: 'EXTRACT',
        Shaped: false,
        Operands: [
          {
            T: 'Compound',
            V: {
              Functor: {
                T: 'Variable',
                V: '#genre'
              },
              Arguments: [
                {
                  Operator: 'PRODUCE',
                  Shaped: false,
                  Operands: [
                    {
                      T: 'Variable',
                      V: '#name'
                    },
                    {
                      T: 'Compound',
                      V: {
                        Functor: {
                          T: 'Atom',
                          V: 'age'
                        },
                        Arguments: [
                          {
                            Operator: 'PRODUCE',
                            Shaped: false,
                            Operands: [
                              {
                                T: 'Variable',
                                V: '#age'
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      {
        Operator: 'COPY',
        Shaped: false,
        Operands: [
          {
            T: 'Formula',
            V: [
              {
                Operator: 'PRODUCE',
                Shaped: false,
                Operands: [
                  {
                    T: 'Variable',
                    V: '#age'
                  }
                ]
              },
              {
                Operator: 'GT',
                Shaped: false,
                Operands: [
                  {
                    T: 'Number',
                    V: 50
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        Operator: 'PRODUCE',
        Shaped: false,
        Operands: [
          {
            T: 'Compound',
            V: {
              Functor: {
                T: 'Variable',
                V: '#name'
              },
              Arguments: [
                {
                  Operator: 'PRODUCE',
                  Shaped: false,
                  Operands: [
                    {
                      T: 'Variable',
                      V: '#genre'
                    },
                    {
                      T: 'Variable',
                      V: '#age'
                    },
                    {
                      T: 'Atom',
                      V: 'years'
                    },
                    {
                      T: 'Atom',
                      V: 'old'
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    ],
    TableValues: [
      [
        {
          T: 'Compound',
          V: {
            Functor: {
              T: 'Atom',
              V: 'Pedro'
            },
            Arguments: [
              {
                Operator: 'PRODUCE',
                Shaped: false,
                Operands: [
                  {
                    T: 'Atom',
                    V: 'man'
                  },
                  {
                    T: 'Number',
                    V: 66
                  },
                  {
                    T: 'Atom',
                    V: 'years'
                  },
                  {
                    T: 'Atom',
                    V: 'old'
                  }
                ]
              }
            ]
          }
        }
      ],
      [
        {
          T: 'Compound',
          V: {
            Functor: {
              T: 'Atom',
              V: 'Alma'
            },
            Arguments: [
              {
                Operator: 'PRODUCE',
                Shaped: false,
                Operands: [
                  {
                    T: 'Atom',
                    V: 'woman'
                  },
                  {
                    T: 'Number',
                    V: 62
                  },
                  {
                    T: 'Atom',
                    V: 'years'
                  },
                  {
                    T: 'Atom',
                    V: 'old'
                  }
                ]
              }
            ]
          }
        }
      ]
    ]
  }
]</pre>
<p>Notice how the first part of a formula gets turned into a <code>Produce</code> operation.</p>
<p>The platform is still Wails, but the target is now Javascript - probably in a Web Worker to keep the UI perfectly reactive. With everything in place, I'm now ready to start the part that I love: implementing the interpreter itself!</p>
<hr>
<p>I'm adding a new Merge operator <code>"</code>, the purpose of which is to join tables on a per value basis.</p>
<pre><code>[ c | 1 | 2 | 3 | 3 | 4 ]</code><br><code>[ d | 5 | bar | moo mew ]</code><br><br><code>[</code><br><code>    merging c and d</code><br><code>    = c " d</code><br><code>    | 1 5</code><br><code>    | 2 bar</code><br><code>    | 3 moo mew</code><br><code>    | 3</code><br><code>    | 4</code><br><code>]</code></pre>
<p>Now I believe the list of operators should be complete.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Parsing in Go, showing in Wails</title>
        <author>
            <name>Julien Laguerre</name>
        </author>
        <link href="https://botbreeder.github.io/parsing-in-go-showing-in-wails.html"/>
        <id>https://botbreeder.github.io/parsing-in-go-showing-in-wails.html</id>

        <updated>2024-03-25T15:01:37+01:00</updated>
            <summary>
                <![CDATA[
                    It's an achievement. I was stuck for several days, daunted by the prospect of connecting Pigeon, which is a PEG parser generator for Go, to Wails which is my target platform. Well I succeeded! This would be probably nothing to anyone used to working with&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>It's an achievement. I was stuck for several days, daunted by the prospect of connecting <a href="https://github.com/mna/pigeon" target="_blank" rel="noopener noreferrer">Pigeon</a>, which is a PEG parser generator for Go, to <a href="https://wails.io/" target="_blank" rel="noopener noreferrer">Wails</a> which is my target platform.</p>
<p>Well I succeeded!</p>
<figure class="post__image"><img loading="lazy"  src="https://botbreeder.github.io/media/posts/11/parser-first-step.PNG" alt="Screen capture of a successful parsing" width="496" height="492" sizes="(max-width: 48em) 100vw, 768px" srcset="https://botbreeder.github.io/media/posts/11/responsive/parser-first-step-xs.PNG 300w ,https://botbreeder.github.io/media/posts/11/responsive/parser-first-step-sm.PNG 480w ,https://botbreeder.github.io/media/posts/11/responsive/parser-first-step-md.PNG 768w ,https://botbreeder.github.io/media/posts/11/responsive/parser-first-step-lg.PNG 1024w ,https://botbreeder.github.io/media/posts/11/responsive/parser-first-step-xl.PNG 1360w ,https://botbreeder.github.io/media/posts/11/responsive/parser-first-step-2xl.PNG 1600w"></figure>
<p>This would be probably nothing to anyone used to working with Go, but I'm completely new to this. Of course I used an example grammar from the Pigeon repo, a simple math expression one, but the next step is to create &amp; flesh out a real parser for Hup. Just being able to generate the parser and to access it, is already a huge step forward for me!</p>
<p>Yeah, 3 × 5 = 15... it's show time 🤩</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hup, design considerations</title>
        <author>
            <name>Julien Laguerre</name>
        </author>
        <link href="https://botbreeder.github.io/hup-design-considerations.html"/>
        <id>https://botbreeder.github.io/hup-design-considerations.html</id>

        <updated>2024-03-19T14:34:18+01:00</updated>
            <summary>
                <![CDATA[
                    Right now, nothing has been said about: Multiple tables having the same name can be seen as a problem (which would lead to a namespace-based solution) or as a feature. I prefer to make it a feature. A table name represents a stack of values,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Right now, nothing has been said about:</p>
<ul style="list-style-type: square;">
<li>What to do when multiple tables have the same name,</li>
<li>Error handling,</li>
<li>User-defined functions or operators,</li>
<li>Implementation details.</li>
</ul>
<hr>
<p>Multiple tables having the same name can be seen as a problem (which would lead to a namespace-based solution) or as a feature. I prefer to make it a feature<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">. A table name represents a stack of values, potentially calculated by several formulas (if several tables have the same name). When a formula is recalculated, the old values are deleted from the stack and the new values are pushed onto it. So the user can always expect a table name to represent values in chronological order of update.</span></p>
<p>Since tables can generate and host other tables, table names can be qualified by path, using a filesystem metaphor. For example, <code>parent/table</code> would mean the table named <code>table</code> that's inside the table named <code>parent</code>.</p>
<hr>
<p>I don't want to make error handling a cause of flow disruption. Instead, the system should be able to continue to work as best as it can, while isolating errors to prevent propagation, and having them be part of the current situation by logging them in dedicated error tables.</p>
<p>As a rule of thumb, when the evaluation of a formula produces an error, the result of that formula is merely an empty list. The built-in <code>ERR</code> table receives a formatted entry about the error. Errors can then be manually handled by the user.</p>
<hr>
<p>User-defined functions are defined in tables. The name of the table is the signature of the function, and the unique value of the table is the body of the function.</p>
<p>User-defined functions always begin with a period "<code>.</code>" character, and are followed by parentheses which receive the arguments, each preceded by a "<code>#</code>" character. The function name's first character is a lowercase letter.</p>
<pre>[ .sqr() | # * # ]<br><br>[<br>    squared units<br>    = [units] .sqr()<br>    | 1<br>    | 4<br>    | 9<br>]<br><br>[ .pow(#power) | (#) &amp; #power \* ]<br><br>[<br>    units to the third<br>    = [units] .pow(3)<br>    | 1<br>    | 8<br>    | 27<br>]</pre>
<p>Remember that evaluation goes from left to right, everything being left-associative. In the body of a user-defined function, a single "<code>#</code>" character represents the values-so-far, or the "previous" operand. If the function was an infix operator, we could say that "<code>#</code>" represents its left-hand side operand.</p>
<p>You might be wondering why the "<code>#</code>" in the <code>pow()</code> function's body is between parentheses. That's because we want want to obtain <code>(1 2 3) * (1 2 3) * (1 2 3)</code> rather than <code>1 * 1 * 1 * 2 * 2 * 2 * 3 * 3 * 3</code>.</p>
<hr>
<p>I'm not yet sure of how all of this will be implemented. But the target language is Go (with Wails for the frontend), and goroutines are probably going to be used extensively.</p>
<p>Oh snap, I know how it will be implemented. By typing on a keyboard with my hands which are fortunately full of fingers.</p>
            ]]>
        </content>
    </entry>
</feed>
